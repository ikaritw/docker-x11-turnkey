package com.tradevan.gateway.client.view;

import org.apache.commons.validator.GenericValidator;
import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.ProgressBar;
import org.eclipse.swt.widgets.Shell;

import com.tradevan.gateway.client.util.TurnkeyConfig;
import com.tradevan.gateway.client.util.TurnkeyLogger;
import com.tradevan.gateway.client.util.TurnkeyLoggerHandler;
import com.tradevan.gateway.client.util.TurnkeyUserConfig;
import com.tradevan.gateway.client.util.TurnkeyUtil;

public class EINVTurnkey {
    private TurnkeyLoggerHandler logger = TurnkeyLogger.getLogger();
    private Shell sShellMain = null;  
    private String msg = "";
    // progressBar畫面
    private Shell dialog = null;

    public static void main(String[] args) {
        Display display = new Display();
        EINVTurnkey eInvTurnkey = new EINVTurnkey();
        eInvTurnkey.sShellMain = new Shell();
        eInvTurnkey.init();
        
        while (!eInvTurnkey.sShellMain.isDisposed()) {
            if (!display.readAndDispatch())
                display.sleep();
        }
        display.dispose();
    }
    

    private void createSShell(Shell shell) {
        shell.setEnabled(false);
        dialog = new Shell(shell, SWT.TOOL);
        dialog.setLayout(new GridLayout(1, false));
        
        Label lblMsg = new Label(dialog, SWT.CENTER);
        lblMsg.setText(TurnkeyUtil.getMessage("DBTesting"));
        lblMsg.setLayoutData(new GridData(SWT.CENTER, SWT.CENTER, true, true, 1, 1));
        
        ProgressBar pb = new ProgressBar(dialog, SWT.HORIZONTAL | SWT.INDETERMINATE);
        pb.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
        UIUtil.setBounds(dialog, 300, 100);
        dialog.open();
    }
    
    
    /*******************************************************************
     * 以上為畫面設定，以下為Action
     *******************************************************************/

    
    private void init() {
        // 開啟ProgressBar視窗
        createSShell(sShellMain);

        Runnable runnable = new Runnable(){
            @Override
            public void run() {
                boolean sucess = true; 
                // 檢查工作目錄是否有設定
                if(sucess && !queryEnv(sShellMain)){
                    sucess = false;
                }
//                // 檢查DB可否連線
//                if(sucess && !queryDB(sShellMain)){
//                    sucess = false;
//                }
                // chk version
                if(sucess && !chkVersion(sShellMain)){
//                    sucess = false;
                }
                closeWnidows(sucess); // 關閉ProgressBar視窗並開啟登入畫面
            }
        };
        Thread t = new Thread(runnable);
        t.start();
    }

    /**
     * 檢查工作目錄是否有設定
     * 若無則開啟環境設定頁面
     * @return
     */
    private boolean queryEnv(Shell shell) {
        TurnkeyUserConfig userCfg = TurnkeyConfig.getUserCfg();
        EnvironmentSetting environmentSetting = new EnvironmentSetting();

        if (GenericValidator.isBlankOrNull(userCfg.getDefPath())) {
            // 開啟環境設定頁面
            CreateEnvConfig runnable = new CreateEnvConfig();
            runnable.setEnvironmentSetting(environmentSetting);
            sShellMain.getDisplay().syncExec(runnable);
            // 等待設定完成
            while(!environmentSetting.sShellMain.isDisposed()){
                try {
                    Thread.sleep(300);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }

            TurnkeyConfig.reloadUserConfig();
            userCfg = TurnkeyConfig.getUserCfg();
            if (GenericValidator.isBlankOrNull(userCfg.getDefPath())) {
                this.msg = TurnkeyUtil.getMessage("NullDefaultPath");
                return false;
            }
        }
        
        return true;
    }
    
    /**
     * 開啟環境設定頁面
     */
    class CreateEnvConfig implements Runnable{
        EnvironmentSetting environmentSetting = null;

        public void setEnvironmentSetting(EnvironmentSetting environmentSetting) {
            this.environmentSetting = environmentSetting;
        }
        
        @Override
        public void run() {
            if (environmentSetting != null)
                environmentSetting.createSShell();
        }
    }
//    
//    /**
//     * 檢查DB是否可以連線
//     * @return
//     */
//    private boolean queryDB(Shell shell) {
//        String methodName = "queryDB";
//        try {
//            TurnkeyUserProfileService.INSTANCE.getTurnkeyUserConfig();
//        } catch (XdaoException e) {
//            this.msg = UIUtil.getDBConnectFailMsg(e, methodName);
//        } catch (Throwable e) {
//            logger.error("Throwable error", e, methodName);
//            this.msg = TurnkeyUtil.getShotStringMsg(e.getMessage());
//        }
//        // 有錯誤發生，顯示訊息並關閉視窗
//        if(this.msg.length() > 0){
//            return false;
//        }
//        return true;
//    }
    
    /**
     * 檢查版本
     * >=0 : 成功
     * < 0 : 失敗
     * @param shell
     * @return
     */
    private boolean chkVersion(Shell shell) {
        // 啟動更新程式
        TurnkeyUpgradeDemon upgradeDemon = new TurnkeyUpgradeDemon();
        CreateTurnkeyUpgrade turnkeyUpgrade = new CreateTurnkeyUpgrade(upgradeDemon);
        sShellMain.getDisplay().syncExec(turnkeyUpgrade);
        // 等待更新完成
        while(!upgradeDemon.sShellMain.isDisposed()){
            try {
                Thread.sleep(300);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }

        return upgradeDemon.getRtnCode() > 0;
    }
    
    /**
     * 啟動更新程式畫面
     */
    class CreateTurnkeyUpgrade implements Runnable{
        private TurnkeyUpgradeDemon upgradeDemon = null;

        public CreateTurnkeyUpgrade(TurnkeyUpgradeDemon upgradeDemon) {
            this.upgradeDemon = upgradeDemon;
        }
        
        @Override
        public void run() {
            if(upgradeDemon != null){
                upgradeDemon.chkVersion();
            }
        }
        
    }

    /**
     * 關閉progressBar畫面
     * 1.true -> 開啟登入畫面
     * 2.false -> 彈出錯誤訊息並關閉整個程式
     * @param openLoginPage
     */
    private void closeWnidows(final boolean openLoginPage){
        if(sShellMain != null && !sShellMain.isDisposed()){
            Runnable runnable = new Runnable(){
                @Override
                public void run() {
                    dialog.close();
                    if(!GenericValidator.isBlankOrNull(msg)){
                        UIUtil.showMsgBox(sShellMain, SWT.ERROR, TurnkeyUtil.getMessage("Fail"), msg);
                    }
                    if(openLoginPage){
                        sShellMain.setVisible(false);
                        LoginPage.getInstance();
                    }else{
                        sShellMain.close();
                    }
                }
            };
            sShellMain.getDisplay().syncExec(runnable);
        }
    }
}
