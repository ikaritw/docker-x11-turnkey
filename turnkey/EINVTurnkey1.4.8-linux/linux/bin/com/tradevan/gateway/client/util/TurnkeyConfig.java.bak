package com.tradevan.gateway.client.util;

import java.io.File;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Properties;

import com.tradevan.commons.config.ConfigFactory;
import com.tradevan.commons.config.XmlConfig;
import com.tradevan.commons.io.FileUtil;

public class TurnkeyConfig {
    /*
     * 讀取einvTurnkeyConfig.xml 相關 XPath
     *
     */
    private static final String PATH_TURNKEY = "TurnkeyConfig[@id='EINVTurnkeyConfig']";
    private static XmlConfig config = null;

    private static String DEFAULT_CONFIG = "conf/einvTurnkeyConfig.xml";
    private static String DEFAULT_USER_CONFIG = "conf/einvUserConfig.xml";
    
    private static final String DEVELOP = "develop-";
    private static final String TEST = "test-";
    private static final String PROD = "production-";

    private static final String SFTP_IP = "sftp-ip";
    private static final String SFTP_PORT = "sftp-port";
    private static final String TARGET_POINT = "targetpoint";
    private static final String VAC_TARGET_POINT = "vac-targetpoint";
  
//    // default folder
//    private static final String UP_CAST = "up-cast";
//    private static final String DOWN_CAST = "down-cast";
//    private static final String PACK = "pack";
//    private static final String UN_PACK = "un-pack";
//    private static final String SEND = "send";
//    private static final String RECEIVER = "receive";

    private static TurnkeyUserConfig userCfg = null;
    
    public static String HomeDir = System.getProperty("user.dir");
    static {
        reloadTurnkeyConfig();
        reloadUserConfig();
    }

    public static void reloadTurnkeyConfig(){
        config = (XmlConfig)ConfigFactory.newConfig(DEFAULT_CONFIG, null);
        if (config == null) {
            throw new IllegalArgumentException("Config file '" + DEFAULT_CONFIG + "' was not found!");
        }

    }

    public static void reloadUserConfig(){
        userCfg = new TurnkeyUserConfig();
        try {
            userCfg.setTurnkeyUserConfig(getUserConfigFile());
        } catch (Exception e) {
            throw new IllegalArgumentException("Read User Config file '" + DEFAULT_USER_CONFIG + "' occur Exception", e);
        }
    }
    
    public static void saveUserCfg(TurnkeyUserConfig cfg) throws IOException{
        if(cfg==null)
            return;

        synchronized (DEFAULT_USER_CONFIG) {
            userCfg = cfg;
            cfg.saveTurnkeyUserConfig(getUserConfigFile());
        }
    }

    private static File getUserConfigFile() {
    	URL url = FileUtil.toUrl(DEFAULT_USER_CONFIG);
    	try {
			return new File(url.toURI());
		} catch (URISyntaxException e) {
			return new File(url.getPath());
		}
    }
    
    public static TurnkeyUserConfig getUserCfg(){
        return userCfg;
    }

    public static Properties getProperties() {
        return config.getProperties(PATH_TURNKEY);
    }

    public static String getProperty(String key){
        return getProperties().getProperty(key);
    }

    public static String getExecuteEnvironment() {
        return userCfg.getExecuteEnvironment();
    }

    public static String getSftpIP(){
        if("P".equals(userCfg.getExecuteEnvironment())){
            return getProperty(PROD+SFTP_IP);
        }else if("D".equals(userCfg.getExecuteEnvironment())){
            return getProperty(DEVELOP+SFTP_IP);
        }else{
            return getProperty(TEST+SFTP_IP);
        }
    }

    public static String getSftpPort(){
        if("P".equals(userCfg.getExecuteEnvironment())){
            return getProperty(PROD+SFTP_PORT);
        }else if("D".equals(userCfg.getExecuteEnvironment())){
            return getProperty(DEVELOP+SFTP_PORT);
        }else{
            return getProperty(TEST+SFTP_PORT);
        }
    }

    public static String getTargetPoint(){
       return getTargetPoint(userCfg.getExecuteEnvironment());
    }
    
    public static String getTargetPoint(String env){
        if(TurnkeyConstant.ENVIRONMENT_PRODUCTION.equals(env)){
            return getProperty(PROD+TARGET_POINT);
        }else if(TurnkeyConstant.ENVIRONMENT_DEVELOP.equals(env)){
            return getProperty(DEVELOP+TARGET_POINT);
        }else{
            return getProperty(TEST+TARGET_POINT);
        }
    }

    public static String getVACTargetPoint(){
    	return "https://gw.einvoice.nat.gov.tw/GEINVDTPListWS/partnerlist?WSDL";
//        return getVACTargetPoint(userCfg.getExecuteEnvironment());
    }
    
    public static String getVACTargetPoint(String env){
        if(TurnkeyConstant.ENVIRONMENT_PRODUCTION.equals(env)){
            return getProperty(PROD+VAC_TARGET_POINT);
        }else if(TurnkeyConstant.ENVIRONMENT_DEVELOP.equals(env)){
            return getProperty(DEVELOP+VAC_TARGET_POINT);
        }else{
            return getProperty(TEST+VAC_TARGET_POINT);
        }
    }

    /**
     * 取得Turnkey安裝路徑
     * @return
     */
    public static String getSetupPath() {
        return ".";
    }

//    /**
//     * 取得預設路徑
//     * @param task
//     * @return
//     */
//    public static String getDefaultFolde(TaskEnum task){
//        switch (task) {
//        case UpCast: return getProperty(UP_CAST);
//        case DownCast: return getProperty(DOWN_CAST);
//        case Pack: return getProperty(PACK);
//        case Unpack: return getProperty(UN_PACK);
//        case SendFile: return getProperty(SEND);
//        case ReceiveFile: return getProperty(RECEIVER);
//        default:
//            break;
//        }
//        return "";
//    }

    public static void main(String[] args) {
        System.out.println(TurnkeyConfig.getExecuteEnvironment());
    }

}
